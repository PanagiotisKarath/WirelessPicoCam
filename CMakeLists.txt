#Setting minimum version of CMake that can be used
cmake_minimum_required(VERSION 3.13)

#Define project's and executable's name
set(PROJECT_NAME remote_camera)

include(pico_sdk_import.cmake) #Include pico-sdk files
project(${PROJECT_NAME} C CXX ASM) #Required languages
set(CMAKE_C_STANDARD 11) #Define C standard
set(CMAKE_CXX_STANDARD 17) #Define C++ standard
pico_sdk_init() #Initialise the pico-sdk

#Tell CMake where to find other source code
add_subdirectory(pico-vfs)

# ==========================================================================
# Settings that are common for both the Access Point and the Station pico
# ==========================================================================
set(WIFI_SSID "picoNetwork") #Define WIFI_SSID variable
set(PASSWORD "pass1234") #Define PASSWORD variable
set(WIFI_PORT "8080") #Define WIFI_PORT variable

# ==========================================================================
# 1st pico - Access point
# ==========================================================================
set(A "access_point") #Variable A is defined as the access point

#Define project files
add_executable(${A}
    src/access_point.c
    dhcpserver/dhcpserver.c
    src/camera.c
    src/wireless.c
    src/fs_utils.c
    arducam/arducam.c
)

pico_enable_stdio_usb(${A} 0) #Not using USB
pico_enable_stdio_uart(${A} 1) #Using UART

#Included directories for the access point
target_include_directories(${A} PRIVATE
    ${CMAKE_CURRENT_LIST_DIR}
    ${CMAKE_CURRENT_LIST_DIR}/src
    ${CMAKE_CURRENT_LIST_DIR}/dhcpserver
)

#Adding preprocessor definitions for the access point
target_compile_definitions(${A} PRIVATE
    WIFI_SSID=\"${WIFI_SSID}\"
    PASSWORD=\"${PASSWORD}\"
    WIFI_PORT=${WIFI_PORT}
)

#Specify that littlefs filesystem is used for the Access Point
target_compile_definitions(${A} PRIVATE USE_SD_FAT)

# Generate header from Pico PIO file
pico_generate_pio_header(${A} ${CMAKE_CURRENT_LIST_DIR}/image.pio)

#Linking required libraries
target_link_libraries(${A}
    pico_cyw43_arch_lwip_poll
    pico_stdlib
    hardware_i2c
    hardware_dma
    hardware_pio
    hardware_pwm
    blockdevice_flash
    blockdevice_heap
    blockdevice_loopback
    blockdevice_sd
    filesystem_fat
    filesystem_littlefs
    filesystem_vfs
)

#Enable the filesystem for the access point
pico_enable_filesystem(${A} FS_INIT src/fs_init.c)

#Creates .map / .bin / .hex / .uf2 / etc files
pico_add_extra_outputs(${A})

# ==========================================================================
# 2nd pico - Station
# ==========================================================================
set(B "station") #Variable B is defined as the station

#Define project files
add_executable(${B}
    src/station.c
    src/wireless.c
    src/camera.c
    src/fs_utils.c
)
pico_enable_stdio_usb(${B} 0) #Not using USB
pico_enable_stdio_uart(${B} 1) #Using UART

#Included directories for the station
target_include_directories(${B} PRIVATE
    ${CMAKE_CURRENT_LIST_DIR}
    ${CMAKE_CURRENT_LIST_DIR}/src
)

#Adding preprocessor definitions to the station (Macros)
target_compile_definitions(${B} PRIVATE
    WIFI_SSID=\"${WIFI_SSID}\"
    PASSWORD=\"${PASSWORD}\"
    WIFI_PORT=${WIFI_PORT}
)

#Specify that FAT filesystem is used for the Station
target_compile_definitions(${B} PRIVATE USE_SD_FAT)

#Linking required libraries
target_link_libraries(${B}
    pico_cyw43_arch_lwip_threadsafe_background
    pico_stdlib
    hardware_i2c
    blockdevice_flash
    blockdevice_heap
    blockdevice_loopback
    blockdevice_sd
    filesystem_fat
    filesystem_littlefs
    filesystem_vfs
)

#Enable the filesystem for the access point
pico_enable_filesystem(${B} FS_INIT src/fs_init.c)

#Creates .map / .bin / .hex / .uf2 / etc files
pico_add_extra_outputs(${B})